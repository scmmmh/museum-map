[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "museum-map"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = []
authors = [{ name = "Mark Hall", email = "mark.hall@work.room3b.eu" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "asyncpg>=0.28.0,<1",
  "fastapi[all]",
  "inflection>=0.5.1,<1",
  "lxml>=5.4.0,<6",
  "meilisearch-python-sdk>=4.7.0,<5",
  "pydantic>=2,<3",
  "pydantic-settings>=2,<3",
  "PyYAML>=6.0,<7",
  "requests>=2.32.4,<3",
  "scipy>=1.15.3,<2",
  "spacy>=3.8.7,<3.9",
  "SQLAlchemy>=2.0.41,<3",
  "sqlalchemy_json>=0.7.0,<1",
  "typer",
  "uvicorn[standard]",
]

[project.urls]
Documentation = "https://github.com/scmmmh/museum-map#readme"
Issues = "https://github.com/scmmmh/museum-map/issues"
Source = "https://github.com/scmmmh/museum-map"

[project.scripts]
museum-map = "museum_map.cli:cli"

[tool.hatch.version]
path = "museum_map/__about__.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build]
exclude = [
  ".github",
  "docker",
  ".gitignore",
  ".pre-commit-config.yaml",
  "basemap.svg",
  "docker-compose.yml",
  "prepare_release.py",
  "museum_map/server/frontend",
]
artifacts = ["museum_map/server/frontend/dist/**/*.*"]

[tool.hatch.envs.default]
dependencies = ["coverage[toml]>=6.5", "pytest", "ruff==0.11.13"]
post-install-commands = ["python -m spacy download en_core_web_sm"]

[tool.hatch.envs.default.scripts]
server = "cd dev && uvicorn --host 0.0.0.0 --reload --reload-dir ../museum_map --log-level debug museum_map.server:app"
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]
style = [
  "ruff check --exit-non-zero-on-fix {args:.}",
  "ruff format --check {args:.}",
]
style-fix = [
  "ruff check --fix --exit-non-zero-on-fix {args:.}",
  "ruff format {args:.}",
]

[tool.ruff]
target-version = "py37"
line-length = 120

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "D",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  # Pydocstyle settings
  "D203",
  "D212",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["uedition_editor"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["museum_map", "tests"]
branch = true
parallel = true
omit = ["museum_map/__about__.py"]

[tool.coverage.paths]
museum_map = ["museum_map", "*/museum-map/museum_map"]
tests = ["tests", "*/museum-map/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
